{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/calculateWinner.js","Components/Game.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","isWinning","isSelected","className","Board","squares","winLine","selectedItem","boardSize","renderSquare","i","includes","render","row","j","loc","push","calculateWinner","Pos","size","isDraw","winNumber","PosX","PosY","Math","floor","rival","player","countLeft","countRight","count","check","Line","wLine","countTop","countBottom","countPriPrev","countPriAft","countSubPrev","countSubAft","length","Game","useState","Array","fill","movePosition","history","setHistory","isDescending","setIsDescending","stepNumber","setStepNumber","xIsNext","setXIsNext","input","setInput","Size","setSize","gameReset","status","current","winInfo","winner","winChain","moves","map","step","move","moveP","col","desc","jumpTo","currentHistory","slice","concat","handleClick","onChange","evt","target","isNaN","number","parseInt","sizeChangeHandle","reverse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49e7abb7.chunk.js","sourcesContent":["function Square({value, onClick, isWinning, isSelected}) {\r\n    if(isWinning)\r\n    {\r\n      isSelected = false;\r\n    }\r\n    return (\r\n      <button className={\"square\" + (isSelected ? \" highlight-selected\" : \"\") + (isWinning ? \" winning\" : \"\")} onClick={onClick}>\r\n        {value}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nfunction Board({squares, onClick, winLine, selectedItem, boardSize}) {\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={\"square-\" + i}\r\n        value={squares[i]}\r\n        onClick={() => onClick(i)}\r\n        isWinning={winLine && winLine.includes(i)}\r\n        isSelected={i === selectedItem}\r\n      />\r\n    );\r\n  }\r\n\r\n  let render = [];\r\n  for(let i = 0; i < boardSize; i++) {\r\n    let row = [];\r\n    for(let j = 0; j < boardSize; j++) {\r\n      let loc = i * boardSize + j;\r\n      row.push(renderSquare(loc));\r\n    }\r\n    render.push(<div key={i} className=\"board-row\">{row}</div>);\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {render}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Board;","function calculateWinner(squares, Pos, size) {\r\n    let isDraw = false;\r\n\r\n    //set number of square that player can win\r\n    let winNumber = size;\r\n    if(winNumber > 5) {\r\n      winNumber = 5;\r\n    }\r\n\r\n    let PosX = Pos % size;\r\n    let PosY = Math.floor(Pos / size);\r\n\r\n    let rival = '';\r\n    let player = squares[Pos];\r\n    if(player === 'X')\r\n    {\r\n      rival = 'O';\r\n    }\r\n    else if (player === 'O'){\r\n      rival = 'X';\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    //check horizontal\r\n\r\n    let countLeft = 0;\r\n    let countRight = 0;\r\n\r\n    //check left\r\n    let count = 0;\r\n    for (let i = PosX - 1; i >= 0; i--) {\r\n      count++;\r\n      if (player === squares[Pos - count]) {\r\n          countLeft++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    //check right\r\n    count = 0;\r\n    for (let i = PosX + 1; i < size; i++) {\r\n      count++;\r\n      if (player === squares[Pos + count]) {\r\n          countRight++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    let check = 1 + countLeft + countRight;\r\n\r\n    if (check === winNumber)\r\n    {\r\n      if((PosX - countLeft - 1 >= 0) || (PosX + countRight + 1 < size))\r\n      {\r\n        if (rival !== squares[Pos - countLeft - 1] || rival !== squares[Pos + countRight + 1])\r\n        {\r\n          let Line = [];\r\n          for (let i = Pos - countLeft; i <= Pos + countRight; i++)\r\n          {\r\n            Line.push(i);\r\n          }\r\n\r\n\r\n          return {\r\n            player: player,\r\n            wLine: Line,\r\n            isDraw: isDraw,\r\n          }\r\n        }\r\n      }\r\n      else{\r\n        let Line = [];\r\n        for (let i = Pos - countLeft; i <= Pos + countRight; i++)\r\n        {\r\n          Line.push(i);\r\n        }\r\n\r\n\r\n        return {\r\n          player: player,\r\n          wLine: Line,\r\n          isDraw: isDraw,\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    ////////////////////////////////////\r\n    //check vertical\r\n\r\n    let countTop = 0;\r\n    let countBottom = 0;\r\n\r\n    //check top\r\n    count = 0;\r\n    for (let i = PosY - 1; i >= 0; i--) {\r\n      count++;\r\n      if (squares[Pos] === squares[Pos - count * size]) {\r\n        countTop++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    //check bottom\r\n    count = 0;\r\n    for (let i = PosY + 1; i < size; i++) {\r\n      count++;\r\n      if (squares[Pos] === squares[Pos + count * size]) {\r\n        countBottom++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    check = 1 + countTop + countBottom;\r\n    if (check === winNumber)\r\n    {\r\n      if((PosY - countTop - 1 >= 0) || (PosY + countBottom + 1 < size))\r\n      {\r\n        if (rival !== squares[Pos - size * (countTop + 1)] || rival !== squares[Pos + size * (countBottom + 1)] )\r\n        {\r\n          let Line = [];\r\n          for (let i = Pos - size * countTop; i <= Pos + size * countBottom; i = i + size)\r\n          {\r\n            Line.push(i);\r\n          }\r\n\r\n          return {\r\n            player: squares[Pos],\r\n            wLine: Line,\r\n            isDraw: isDraw,\r\n          }\r\n        }\r\n      }\r\n      else{\r\n        let Line = [];\r\n        for (let i = Pos - size * countTop; i <= Pos + size * countBottom; i = i + size)\r\n        {\r\n          Line.push(i);\r\n        }\r\n\r\n        return {\r\n          player: squares[Pos],\r\n          wLine: Line,\r\n          isDraw: isDraw,\r\n        }\r\n      }\r\n    }\r\n\r\n    ////////////////////////////////////\r\n    //check Primary Diagonal\r\n\r\n    let countPriPrev = 0;\r\n    let countPriAft = 0;\r\n\r\n    count = 0;\r\n    for (let i = PosY - 1; i >= 0; i--) {\r\n      count++;\r\n\r\n      if (PosX - count < 0)\r\n      {\r\n        break;\r\n      }\r\n\r\n      if (squares[Pos] === squares[Pos - count * size - count]) {\r\n        countPriPrev++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    count = 0;\r\n    for (let i = PosY + 1; i < size; i++) {\r\n      count++;\r\n\r\n      if (PosX + count === size)\r\n      {\r\n        break;\r\n      }\r\n\r\n      if (squares[Pos] === squares[Pos + count * size + count]) {\r\n        countPriAft++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    check = 1 + countPriPrev + countPriAft;\r\n    if (check === winNumber)\r\n    {\r\n      if((PosX - countPriPrev - 1 >= 0) || (PosY - countPriPrev - 1 >= 0) || (PosX + countPriAft + 1 < size) || (PosY + countPriAft + 1 < size))\r\n      {\r\n        if (rival !== squares[Pos - size * (countPriPrev + 1) - countPriPrev - 1] || rival !== squares[Pos + size * (countPriAft + 1) + countPriAft + 1] )\r\n        {\r\n          let Line = [];\r\n          for (let i = Pos - size * countPriPrev - countPriPrev; i <= Pos + size * countPriAft + countPriAft; i = i + size + 1)\r\n          {\r\n            Line.push(i);\r\n          }\r\n\r\n          return {\r\n            player: squares[Pos],\r\n            wLine: Line,\r\n            isDraw: isDraw,\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        let Line = [];\r\n        for (let i = Pos - size * countPriPrev - countPriPrev; i <= Pos + size * countPriAft + countPriAft; i = i + size + 1)\r\n        {\r\n          Line.push(i);\r\n        }\r\n\r\n        return {\r\n          player: squares[Pos],\r\n          wLine: Line,\r\n          isDraw: isDraw,\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    ////////////////////////////////////\r\n    //check Sub Diagonal\r\n\r\n    let countSubPrev = 0;\r\n    let countSubAft = 0;\r\n\r\n    count = 0;\r\n    for (let i = PosY - 1; i >= 0; i--) {\r\n      count++;\r\n\r\n      if (PosX + count === size)\r\n      {\r\n        break;\r\n      }\r\n\r\n      if (squares[Pos] === squares[Pos - count * size + count]) {\r\n        countSubPrev++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    count = 0;\r\n    for (let i = PosY + 1; i < size; i++) {\r\n      count++;\r\n\r\n      if (PosX - count < 0)\r\n      {\r\n        break;\r\n      }\r\n\r\n      if (squares[Pos] === squares[Pos + count * size - count]) {\r\n        countSubAft++;\r\n      }\r\n      else{\r\n          break;\r\n      }\r\n    }\r\n\r\n    check = 1 + countSubPrev + countSubAft;\r\n    if (check === winNumber)\r\n    {\r\n      if((PosX + countSubPrev + 1 < size) || (PosY - countSubPrev - 1 >= 0) || (PosX - countSubAft - 1 >= 0) || (PosY + countSubAft + 1 < size))\r\n      {\r\n        if (rival !== squares[Pos - size * (countSubPrev + 1) + countSubPrev + 1] || rival !== squares[Pos + size * (countSubAft + 1) - countSubAft - 1] )\r\n        {\r\n          let Line = [];\r\n          for (let i = Pos - size * countSubPrev + countSubPrev; i <= Pos + size * countSubAft - countSubAft; i = i + size - 1)\r\n          {\r\n            Line.push(i);\r\n          }\r\n\r\n          return {\r\n            player: squares[Pos],\r\n            wLine: Line,\r\n            isDraw: isDraw,\r\n          }\r\n        }\r\n      }\r\n      else{\r\n      let Line = [];\r\n        for (let i = Pos - size * countSubPrev + countSubPrev; i <= Pos + size * countSubAft - countSubAft; i = i + size - 1)\r\n        {\r\n          Line.push(i);\r\n        }\r\n\r\n        return {\r\n          player: squares[Pos],\r\n          wLine: Line,\r\n          isDraw: isDraw,\r\n        }\r\n      }\r\n    }\r\n  \r\n    isDraw = true;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if(squares[i] === null) {\r\n        isDraw = false;\r\n        break;\r\n      }\r\n    }\r\n  \r\n    return {\r\n      player: null,\r\n      wLine: null,\r\n      isDraw: isDraw\r\n    };\r\n}\r\n\r\nexport default calculateWinner;","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\nimport calculateWinner from \"./calculateWinner\";\r\n\r\nfunction Game() {\r\n  const [history, setHistory] = useState([\r\n    {\r\n      squares: Array(9).fill(null),\r\n      movePosition: null,\r\n    }\r\n  ]);\r\n  const [isDescending, setIsDescending] = useState(true);\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [input, setInput] = useState('3');\r\n  const [Size, setSize] = useState(3);\r\n\r\n  function handleClick(i) {\r\n    const currentHistory = history.slice(0, stepNumber + 1);\r\n    const current = currentHistory[currentHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    const Pos = current.movePosition;\r\n    if (calculateWinner(squares, Pos, Size).player || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(currentHistory.concat([\r\n      {\r\n        squares: squares,\r\n        movePosition: i\r\n      }\r\n    ]));\r\n    setStepNumber(currentHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  function switchSort() {\r\n    setIsDescending(!isDescending);\r\n  }\r\n\r\n  function gameReset() {\r\n    setHistory([\r\n      {\r\n        squares: Array(9).fill(null),\r\n        movePosition: null,\r\n      }\r\n    ]);\r\n    setIsDescending(true);\r\n    setStepNumber(0);\r\n    setXIsNext(true);\r\n  }\r\n\r\n  function changeInputSize(value) {\r\n    setInput(value);\r\n  }\r\n\r\n  function sizeChangeHandle() {\r\n    if (!isNaN(input))\r\n    {\r\n      let number = parseInt(input);\r\n      if(number < 3) {\r\n        number = 3;\r\n      }\r\n      gameReset();\r\n      setSize(number);\r\n    }\r\n  }\r\n\r\n  const current = history[stepNumber];\r\n  const winInfo = calculateWinner(current.squares, current.movePosition, Size);\r\n  const winner = winInfo.player;\r\n  const winChain = winInfo.wLine;\r\n  const isDraw = winInfo.isDraw;\r\n\r\n  \r\n  const moves = history.map((step, move) => {\r\n    const moveP = step.movePosition;\r\n    const col = moveP % 3;\r\n    const row = Math.floor(moveP / 3);\r\n\r\n    const desc = move ?\r\n      'Go to move #' + move + \" (\" + col + \",\" + row + \")\" :\r\n      'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button\r\n          className={\"button i01\" + (move === stepNumber ? \" bold-selected-item\" : \"\")}\r\n          onClick={() => jumpTo(move)}>\r\n            {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n  \r\n  \r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  }\r\n  else if (isDraw) {\r\n    status = \"Draw\";\r\n  }\r\n  else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"grid-container\">\r\n        <div className=\"grid-board-game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => handleClick(i)}\r\n              winLine={winChain? winChain : []}\r\n              selectedItem={current.movePosition}\r\n              boardSize={Size}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid-game-info\">\r\n          <div className=\"game-info\">\r\n            <div>\r\n              <label>Set Size Of Table: </label>\r\n              <input className=\"input\" value={input} onChange={evt => changeInputSize(evt.target.value)}/>\r\n              <button className=\"button i02\" onClick={() => sizeChangeHandle()}>\r\n              {\"Set\"}\r\n              </button>\r\n            </div>\r\n            <div>{status}</div>\r\n            <button className=\"button\" onClick={() => switchSort()}>\r\n              {isDescending? \"Asc\" : \"Desc\"}\r\n            </button>\r\n            <button className=\"button\" onClick={() => gameReset()}>\r\n              {\"Reset Game\"}\r\n            </button>\r\n            <ol>{isDescending ? moves : moves.reverse()}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default Game;","import Game from '../Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}